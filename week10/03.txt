class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size();
        int finalState = (1 << n) - 1;
        queue<tuple<int, int, int>> q; 
        unordered_set<string> visited; 

        for (int i = 0; i < n; ++i) {
            int mask = (1 << i); 
            q.push({i, mask, 0});
            visited.insert(to_string(i) + "," + to_string(mask));
        }

        while (!q.empty()) {
            auto [node, mask, steps] = q.front();
            q.pop();

            if (mask == finalState) return steps;

            for (int neighbor : graph[node]) {
                int nextMask = mask | (1 << neighbor); 
                string state = to_string(neighbor) + "," + to_string(nextMask);

                if (!visited.count(state)) {
                    q.push({neighbor, nextMask, steps + 1});
                    visited.insert(state);
                }
            }
        }
        
        return -1; 
    }
};
