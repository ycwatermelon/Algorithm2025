class Solution {
public:
    int openLock(vector<string>& deadends, string target) {

        unordered_set<string> dead(deadends.begin(), deadends.end());

        if (dead.count("0000")) return -1;

        if (target == "0000") return 0;

        queue<string> q;
        q.push("0000");
        unordered_set<string> visited;
        visited.insert("0000");

        int steps = 0;

        while (!q.empty()) {
            int size = q.size();

            for (int i = 0; i < size; i++) {
                string current = q.front();
                q.pop();

                if (current == target) {
                    return steps;
                }

                for (int j = 0; j < 4; j++) {
                    char original = current[j];
                    current[j] = (original == '9') ? '0' : original + 1;

                    if (!visited.count(current) && !dead.count(current)) {
                        visited.insert(current);
                        q.push(current);
                    }

                    current[j] = (original == '0') ? '9' : original - 1;

                    if (!visited.count(current) && !dead.count(current)) {
                        visited.insert(current); 
                        q.push(current);   
                    }

                    current[j] = original;
                }
            }

            steps++;
        }

        return -1;
    }
};
